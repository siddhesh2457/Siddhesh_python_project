1)
Modify the generated data.service.ts file to include HttpClient and an Observable.

// src/app/data.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DataService {

  private apiUrl = 'https://jsonplaceholder.typicode.com/posts';  // Example API URL

  constructor(private http: HttpClient) { }

  // Function to fetch data from the API using HttpClient and return as Observable
  getData(): Observable<any> {
    return this.http.get<any>(this.apiUrl);
  }
}



Step 3: Modify app.module.ts to Import HttpClientModule

// src/app/app.module.ts
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http'; // Import HttpClientModule

import { AppComponent } from './app.component';
import { DataService } from './data.service'; // Import the DataService

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule // Add HttpClientModule to imports
  ],
  providers: [DataService],
  bootstrap: [AppComponent]
})
export class AppModule { }

Step 4: Fetch Data in the Component
// src/app/app.component.ts
import { Component, OnInit } from '@angular/core';
import { DataService } from './data.service'; // Import DataService

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  posts: any[] = [];  // Array to hold the fetched posts

  constructor(private dataService: DataService) { }

  ngOnInit(): void {
    // Fetch data when the component initializes
    this.dataService.getData().subscribe(
      (data) => {
        this.posts = data;  // Assign fetched data to the posts array
        console.log(this.posts);
      },
      (error) => {
        console.error('Error fetching data:', error);
      }
    );
  }
}



Step 5: Display Data in app.component.html

<!-- src/app/app.component.html -->
<div class="container">
  <h2>Fetched Posts</h2>

  <ul *ngIf="posts.length > 0">
    <li *ngFor="let post of posts">
      <h3>{{ post.title }}</h3>
      <p>{{ post.body }}</p>
    </li>
  </ul>

  <p *ngIf="posts.length === 0">Loading posts...</p>
</div>


2)
const express = require('express');
const app = express();
const port = 3000;

// Middleware to parse JSON request bodies
app.use(express.json());

// Dummy in-memory storage for employees (in a real-world app, use a database)
let employees = [
  { id: 1, name: 'John Doe', position: 'Software Engineer', department: 'Engineering' },
  { id: 2, name: 'Jane Smith', position: 'Product Manager', department: 'Product' }
];

// Route for creating a new employee (POST /employees)
app.post('/employees', (req, res) => {
  const { name, position, department } = req.body;

  // Check if the required fields are provided
  if (!name || !position || !department) {
    return res.status(400).json({ error: 'Name, position, and department are required' });
  }

  // Create a new employee object
  const newEmployee = {
    id: employees.length + 1, // Simple id generation
    name,
    position,
    department
  };

  // Add the new employee to the employees array
  employees.push(newEmployee);

  // Respond with the newly created employee
  res.status(201).json(newEmployee);
});

// Route for updating an existing employee by ID (PUT /employees/:id)
app.put('/employees/:id', (req, res) => {
  const employeeId = parseInt(req.params.id);
  const { name, position, department } = req.body;

  // Find the employee by ID
  const employee = employees.find(e => e.id === employeeId);

  if (!employee) {
    return res.status(404).json({ error: 'Employee not found' });
  }

  // Update the employee details
  employee.name = name || employee.name;
  employee.position = position || employee.position;
  employee.department = department || employee.department;

  // Respond with the updated employee
  res.status(200).json(employee);
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
